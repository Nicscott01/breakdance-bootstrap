<?php

namespace BricBreakdanceElements;

use function Breakdance\Elements\c;
use function Breakdance\Elements\PresetSections\getPresetSection;


\Breakdance\ElementStudio\registerElementForEditing(
    "BricBreakdanceElements\\Test",
    \Breakdance\Util\getdirectoryPathRelativeToPluginFolder(__DIR__)
);

class Test extends \Breakdance\Elements\Element
{
    static function uiIcon()
    {
        return 'SquareIcon';
    }

    static function tag()
    {
        return 'div';
    }

    static function tagOptions()
    {
        return [];
    }

    static function tagControlPath()
    {
        return false;
    }

    static function name()
    {
        return 'Test';
    }

    static function className()
    {
        return 'autogenerated-bbe-test';
    }

    static function category()
    {
        return 'other';
    }

    static function badge()
    {
        return false;
    }

    static function slug()
    {
        return __CLASS__;
    }

    static function template()
    {
        return file_get_contents(__DIR__ . '/html.twig');
    }

    static function defaultCss()
    {
        return file_get_contents(__DIR__ . '/default.css');
    }

    static function defaultProperties()
    {
        return false;
    }

    static function defaultChildren()
    {
        return false;
    }

    static function cssTemplate()
    {
        $template = file_get_contents(__DIR__ . '/css.twig');
        return $template;
    }

    static function designControls()
    {
        return [];
    }

    static function contentControls()
    {
        return [c(
        "public_key",
        "Public Key",
        [],
        ['type' => 'text', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "first_name",
        "First Name",
        [],
        ['type' => 'text', 'layout' => 'vertical', 'variableOptions' => ['enabled' => true, 'populate' => ['path' => 'content.form.fields', 'text' => 'label', 'value' => 'advanced.id']]],
        false,
        false,
        [],
      ), c(
        "last_name",
        "Last Name",
        [],
        ['type' => 'text', 'layout' => 'vertical', 'variableOptions' => ['enabled' => true, 'populate' => ['path' => 'content.form.fields', 'text' => 'label', 'value' => 'advanced.id']]],
        false,
        false,
        [],
      ), c(
        "email_address",
        "Email Address",
        [],
        ['type' => 'text', 'layout' => 'vertical', 'variableOptions' => ['enabled' => true, 'populate' => ['path' => 'content.form.fields', 'text' => 'label', 'value' => 'advanced.id']]],
        false,
        false,
        [],
      ), c(
        "phone_number",
        "Phone Number",
        [],
        ['type' => 'text', 'layout' => 'vertical', 'variableOptions' => ['enabled' => true, 'populate' => ['path' => 'content.form.fields', 'text' => 'label', 'value' => 'advanced.id']]],
        false,
        false,
        [],
      ), c(
        "fields_map",
        "Fields Map",
        [c(
        "tripleseat_field",
        "Tripleseat Field",
        [],
        ['type' => 'dropdown', 'layout' => 'vertical', 'items' => [['text' => 'Contact Preference', 'value' => 'contact_preference'], ['text' => 'Company', 'value' => 'company'], ['text' => 'Nature of Event', 'value' => 'event_description'], ['text' => 'Location ID', 'value' => 'location_id'], ['text' => 'Event Date', 'value' => 'event_date'], ['text' => 'Start Time', 'value' => 'start_time'], ['text' => 'End Time', 'value' => 'end_time'], ['text' => 'Guest Count', 'value' => 'guest_count'], ['text' => 'Additional Information', 'value' => 'addition_information'], ['text' => 'Lead Form ID', 'value' => 'lead_form_id'], ['text' => 'Email Opt-in', 'value' => 'email_opt_in'], ['text' => 'Lead Source ID', 'value' => 'lead_source_id'], ['text' => 'Referral Source ID', 'value' => 'referral_source_id'], ['text' => 'Referral Source (Other)', 'value' => 'referral_source_other'], ['text' => 'GFPR Consent (value should be 1 if consented)', 'value' => 'gdpr_consent_granted'], ['text' => 'Event Style', 'value' => 'event_style'], ['value' => 'campaign_source', 'text' => 'Campaign Source'], ['text' => 'Campaign Medium', 'value' => 'campaign_medium'], ['value' => 'campaign_name', 'text' => 'Campaign Name'], ['value' => 'campaign_term', 'text' => 'Campaign Term'], ['value' => 'campaign_content', 'text' => 'Campaign Content']]],
        false,
        false,
        [],
      ), c(
        "form_field",
        "Form Field",
        [],
        ['type' => 'text', 'layout' => 'vertical', 'variableOptions' => ['enabled' => true, 'populate' => ['path' => 'content.form.fields', 'text' => 'label', 'value' => 'advanced.id']]],
        false,
        false,
        [],
      )],
        ['type' => 'repeater', 'layout' => 'vertical', 'repeaterOptions' => ['titleTemplate' => '{tripleseat_field}', 'defaultTitle' => 'Field', 'buttonName' => 'Add Field']],
        false,
        false,
        [],
      )];
    }

    static function settingsControls()
    {
        return [];
    }

    static function dependencies()
    {
        return false;
    }

    static function settings()
    {
        return ['shareStateWithChildSSR' => true];
    }

    static function addPanelRules()
    {
        return false;
    }

    static public function actions()
    {
        return false;
    }

    static function nestingRule()
    {
        return ["type" => "final",   ];
    }

    static function spacingBars()
    {
        return false;
    }

    static function attributes()
    {
        return false;
    }

    static function experimental()
    {
        return false;
    }

    static function order()
    {
        return 0;
    }

    static function dynamicPropertyPaths()
    {
        return [];
    }

    static function additionalClasses()
    {
        return false;
    }

    static function projectManagement()
    {
        return false;
    }

    static function propertyPathsToWhitelistInFlatProps()
    {
        return false;
    }

    static function propertyPathsToSsrElementWhenValueChanges()
    {
        return false;
    }
}
